/*
WPL functions for working with Ques

range
	n range
	^creates a Que with the numbers in range n
sizeof
	q sizeof
	^ puts the number of items in the Que on the stack
copy
	q copy
	^ puts a copy of the Que on the stack
index
	q n index
	^ removes the nth item from the Que and puts it on the stack
*/

/*
Function that generates a Que full of a range of ints
the python equivalent: range(s.pop())
*/

" range " :
      !namespace
      " qtools Range " namespace
      = Name
      = i
      0 = n
      1 i -
      loop ( n 1 i - > )
      	   dup 1 swap -
	   n 1 + = n
      endloop
      i Que
      Name namespace
endrange

/*
Function that returns size of a Que to the stack
python equivalent: len(Que)
*/

" sizeof " :
      !namespace
      " qtools sizeof " namespace
      = Name
      = que
      0 = n
      que " FLAG " push
      que pop
      loop ( dup " FLAG " == not )
	    que pop
	    n 1 + = n
      endloop
      eat
      n Stk = stk
      0 = i
      loop ( i n == not )
      	   que stk pop push
	   i 1 + = i
      endloop
      n
      Name namespace
endsizeof

/*
Function Copy. makes a copy of a Que
a copy, not a pointer to the original
*/

" copy " :
      !namespace
      " qtools copy " namespace
      = Name
      = que
      0 Que = que_copy
      0 = i
      loop ( i que sizeof == not )
     	   que pop = item
	   que item push
	   que_copy item push
	   i 1 + = i
      endloop
      que_copy
      Name namespace
endcopy

/*
Index function: Que n index returns and removes the nth item in that que
python equivalent: Que[n]
*/

" index " :
      !namespace
      " qtools index " namespace
      = Name
      = i
      = que
      0 Que = new
      0 = current
      loop ( i current == not )
      	   new que pop push
	   1 current + = current
      endloop
      que pop = item
      loop ( que sizeof 0 == not )
      	   new que pop push
      endloop
      loop ( index_new sizeof 0 == not )
     	    qindex_que qindex_new pop push
      endloop
      item
      Name namespace
endindex

/* test */
